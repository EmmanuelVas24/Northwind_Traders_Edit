/*	Card Table
	Each Customer can have 1 or more Cards
	Customers will be able to make transactions with their cards
    Card Numbers will be encrypted with AES and a salt, to avoid patterns in the encrypted data.
*/

CREATE TABLE `Card` (
	Card_Count INT NOT NULL AUTO_INCREMENT,
	Card_Number VARCHAR(100) DEFAULT NULL,
    CustomerID VARCHAR(5) DEFAULT NULL,
    Salt VARCHAR(5) DEFAULT NULL,
    Key_Val VARCHAR(5) DEFAULT NULL,
    CONSTRAINT `PK_Card` PRIMARY KEY (`Card_Count`)
    );
    
ALTER TABLE `Card` ADD CONSTRAINT `FK_Card_Customers` 
FOREIGN KEY (`CustomerID`) REFERENCES `Customers` (`CustomerID`);

CREATE INDEX `Card_Number` ON `Card` (`Card_Number`);

-- ------------------------------------------------------------------------------------------------------

-- The procedure POPULATE_CARD will insert values into the Card Table when called
-- Since 1 card will be assigned to each customer, the cards table will have the same number of rows as the customers table


DROP PROCEDURE IF EXISTS POPULATE_CARD;
DELIMITER $$
CREATE PROCEDURE POPULATE_CARD()
BEGIN

DECLARE card_num VARCHAR(10) DEFAULT NULL;
DECLARE salt_val VARCHAR(5) DEFAULT NULL;
DECLARE key_val VARCHAR(5) DEFAULT NULL;
DECLARE cust_ID VARCHAR(5) DEFAULT NULL;

DECLARE customers_row_count INT DEFAULT 0;
DECLARE i INT DEFAULT 0;
SELECT COUNT(*) FROM customers INTO customers_row_count;
SET i=0;

WHILE i<customers_row_count DO 					-- Iterates 93 times (Number of Customers)
  CALL GET_SALT_KEY(@salt_val);					-- Get random salt value and store it in a variable
  CALL GET_SALT_KEY(@key_val);					-- Get random key value and store it in a variable
  CALL GET_CARD_NUMBER(@card_num);				-- Get random card number and store it in a variable
  CALL GET_CUSTOMER_ID(@cust_ID,@i);			-- Get 1 customerID from the customers table
  
  INSERT INTO Card(Card_Count,Card_Number,CustomerID,Salt,Key_Val) VALUES(null,(concat(@card_num,@salt_val)),@cust_ID,@salt_val,@key_val);
  
  SET i = i + 1;								-- increment i
END WHILE;

End;
$$

DELIMITER ;


-- The 10 digit Card Number will be generated randomly by the procedure GET_CARD_NUMBER

DELIMITER $$

CREATE PROCEDURE GET_CARD_NUMBER(OUT card_number VARCHAR(10))
BEGIN
SELECT concat(substring('0123456789', rand()*10+1, 1),
              substring('0123456789', rand()*10+1, 1),
              substring('0123456789', rand()*10+1, 1),
              substring('0123456789', rand()*10+1, 1),
              substring('0123456789', rand()*10+1, 1),
              substring('0123456789', rand()*10+1, 1),
              substring('0123456789', rand()*10+1, 1),
              substring('0123456789', rand()*10+1, 1),
              substring('0123456789', rand()*10+1, 1),
              substring('0123456789', rand()*10+1, 1)
             )
             INTO card_number;
END $$

DELIMITER ;

-- The Salt and Key Values will be randomly generated by the procedure GET_SALT_KEY

DELIMITER $$

CREATE PROCEDURE GET_SALT_KEY(OUT salt_key_value VARCHAR(5))
BEGIN
SELECT concat(substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand()*36+1, 1),
              substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand()*36+1, 1),
              substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand()*36+1, 1),
              substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand()*36+1, 1),
              substring('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', rand()*36+1, 1)
             )
             INTO salt_key_value;
END $$

DELIMITER ;

-- A Card is assigned to each customer, so the procedure GET_CUSTOMER_ID attempts to use a prepared statement to 
-- retrieve a single customerID with each call. However, the row_num variable is out of scope, and cannot give the desired 
-- input to the procedure, which is an inremented row number. I had to populate the customerID column another way.

DELIMITER $$

CREATE PROCEDURE GET_CUSTOMER_ID(OUT customer_id VARCHAR(5), IN row_num INT)
BEGIN

  PREPARE STMT FROM 
  'SET @customer_ID = (SELECT CustomerID FROM Customers ORDER BY CustomerID LIMIT ?,1)';
  EXECUTE STMT USING @row_num;
  DEALLOCATE PREPARE STMT;
  
END $$

DELIMITER ;

-- I used this update statement to populate the CustomerID column in the Card table.

UPDATE card                                                           
INNER JOIN customers ON card.Card_Count = customers.Region
SET card.CustomerID = customers.CustomerID;


CALL POPULATE_CARD();
    

SELECT * FROM card;				-- Check to see if the Card table is correct.

-- --------------------------------------------------------------------------------------------------------

/*  Transaction Table
	Each Transaction should be associated with a CustomerID
    A Transaction is made with a Card (Card_Number)
*/


CREATE TABLE `Transactions` (
	Transaction_Order INTEGER NOT NULL AUTO_INCREMENT,
	CustomerID VARCHAR(5) DEFAULT NULL,
    Card_Number VARCHAR(100) DEFAULT NULL,
    Amount_Paid INTEGER DEFAULT NULL,
    CONSTRAINT `PK_Transactions` PRIMARY KEY (`Transaction_Order`)
    );
    
ALTER TABLE `Transactions` ADD CONSTRAINT `FK_Transactions_Customers` 
FOREIGN KEY (`CustomerID`) REFERENCES `Customers` (`CustomerID`);

ALTER TABLE `Transactions` ADD CONSTRAINT `FK_Transactions_Orders` 
FOREIGN KEY (`Transaction_Order`) REFERENCES `Orders` (`OrderID`);

ALTER TABLE `Transactions` ADD CONSTRAINT `FK_Transactions_Card` 
FOREIGN KEY (`Card_Number`) REFERENCES `Card` (`Card_Number`);

-- The AUTO_INCREMENT will start from 10248, so we can emulate the OrderID column in the table Orders.

ALTER TABLE Transactions AUTO_INCREMENT=10248;

-- -------------------------------------------------------------------------------------------------------------


-- The POPULATE TRANSACTIONS Procedure will insert null values into all columns except Transaction_Order,
-- Which will be the same as OrderID.
-- We can then later update the other null columns by using an INNER JOIN.

DROP PROCEDURE IF EXISTS POPULATE_TRANSACTIONS;
DELIMITER $$
CREATE PROCEDURE POPULATE_TRANSACTIONS()
BEGIN

DECLARE orders_row_count INT DEFAULT 0;
DECLARE i INT DEFAULT 0;
SELECT COUNT(*) FROM orders INTO orders_row_count;
SET i=0;

WHILE i<orders_row_count DO 
  INSERT INTO Transactions(Transaction_Order,CustomerID,Card_Number,Amount_Paid) VALUES(null,null,null,null);  
  SET i = i + 1;
END WHILE;

End;
$$

DELIMITER ;


CALL POPULATE_TRANSACTIONS();

select * from transactions;        -- Check if Transaction_Order has the desired values


UPDATE transactions                                                          -- Fill CustomerID column
INNER JOIN orders ON transactions.Transaction_Order = orders.OrderID
SET transactions.CustomerID = orders.CustomerID;



UPDATE transactions                                                          -- Fill Card_Number column
INNER JOIN card ON transactions.CustomerID = card.CustomerID
SET transactions.Card_Number = card.Card_Number;


select OrderID, sum(UnitPrice*Quantity) as Amount                            -- We want the Amount charged on each order 
from orderdetails															 -- in the Amount_Paid column
group by OrderID;


CREATE TEMPORARY TABLE GETAMOUNT					     -- Create a temporary table GETAMOUNT
select OrderID, sum(UnitPrice*Quantity) as Amount                            
from orderdetails
group by OrderID;


UPDATE transactions                                                          -- INNER JOIN WITH GETAMOUNT to fill the 
INNER JOIN GETAMOUNT ON transactions.Transaction_Order = GETAMOUNT.OrderID   -- Amount_Paid column
SET transactions.Amount_Paid = GETAMOUNT.Amount;

DROP TEMPORARY TABLE GETAMOUNT;						     -- DROP temp table after you're finished using it

SELECT * FROM transactions;

-- -----------------------------------------------------------------------------------------------------------

-- View that shows total amount paid by each customer

CREATE VIEW `Total Amount Paid by Customer`
AS
SELECT CustomerID,
       SUM(Amount_Paid) AS Total_Amount
FROM Transactions
GROUP BY CustomerID;



SELECT * FROM `northwind`.`total amount paid by customer`;


-- Similar to `Total Amount Paid by Customer` View. Enter the CustomerID as input,
-- and get back the total amount paid by the user

DROP PROCEDURE IF EXISTS GET_USER_AMOUNT;
DELIMITER $$
CREATE PROCEDURE GET_USER_AMOUNT(IN Cust_Name VARCHAR(5))
BEGIN

SELECT CustomerID,
       SUM(Amount_Paid) AS Total_Amount
FROM Transactions
WHERE CustomerID = Cust_Name
GROUP BY CustomerID;

End;
$$

DELIMITER ;

CALL `northwind`.`GET_USER_AMOUNT`('BLONP');


-- The procedure CARD_USE_DATES will get a Card_Number as input, and will return all the 
-- dates when the card was used.

DROP PROCEDURE IF EXISTS CARD_USE_DATES;
DELIMITER $$
CREATE PROCEDURE CARD_USE_DATES(IN card_num VARCHAR(100))
BEGIN

SELECT Card_Number,
	   Transaction_Order AS OrderID,
       OrderDate
FROM Transactions
INNER JOIN orders ON transactions.Transaction_Order = orders.OrderID
WHERE transactions.Card_Number = card_num;

End;
$$

DELIMITER ;


CALL `northwind`.`CARD_USE_DATES`('7120355086OO22R');


-- ---------------------------------------------------------------------------------------------------------------







